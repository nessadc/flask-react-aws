name: Continuous Integration and Delivery 

on: 
  push:
    branches:
      - main
      - dev

env:
  USERS: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/test-driven-users:prod
  CLIENT: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/test-driven-client
  REACT_APP_API_SERVICE_URL: "http://flask-react-alb-2036598675.us-east-1.elb.amazonaws.com"
  AWS_RDS_URI: "postgres://webapp:GyfGGZy4Il0A3NvIH3Hw@flask-react-db.ctffmwo1n6aa.us-east-1.rds.amazonaws.com:5432/api_prod" 
  PRODUCTION_SECRET_KEY: "3542523a19ae1bd634ad6b2788e94071e7c7368615bfe8d0"

jobs:
  
  build_and_test:
    name: Build & Test Dev Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Images
        run: |
          docker pull ${{ env.USERS }} || true
          docker pull ${{ env.CLIENT }}:builder || true
          docker pull ${{ env.CLIENT }}:prod || true
      - name: Build Images
        run: |
          echo "Building and testing dev images.."
          docker-compose up --detach --build
          docker-compose exec -T api python -m pytest "src/tests" -p no:warnings --cov="src"
          docker-compose exec -T api flake8 src
          docker-compose exec -T api black src --check
          docker-compose exec -T api isort src --check-only
          docker-compose exec -T client npm run lint
          docker-compose exec -T client npm run prettier:check
          docker-compose exec -T client npm run prettier:write


  build_prod:
    name: Build & Push Prod Images
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Images
        run: |
          docker pull ${{ env.USERS }} || true
          docker pull ${{ env.CLIENT }}:builder || true
          docker pull ${{ env.CLIENT }}:prod || true
      - name: Build prod images
        run: |
          echo "Building prod images..."
          docker build \
            --cache-from ${{ env.USERS }} \
            --file services/users/Dockerfile.prod \
            --tag ${{ env.USERS }} \
            "./services/users"
          docker build \
            --target builder \
            --cache-from ${{ env.CLIENT }}:builder \
            --file services/client/Dockerfile.prod \
            --tag ${{ env.CLIENT }}:builder \
            --build-arg NODE_ENV=production \
            --build-arg REACT_APP_API_SERVICE_URL=${{ env.REACT_APP_API_SERVICE_URL }} \
            "./services/client"
          docker build \
            --cache-from ${{ env.CLIENT }}:prod \
            --file services/client/Dockerfile.prod \
            --tag ${{ env.CLIENT }}:prod \
            "./services/client"
      - name: Push Prod Images
        run: |
          echo "Pushing prod images to GitHub Packages..."
          docker push ${{ env.USERS }}
          docker push ${{ env.CLIENT }}:builder
          docker push ${{ env.CLIENT }}:prod


  deploy:
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: [build_and_test, build_prod]
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Update task definitions in ECS
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh
        env:
          AWS_RDS_URI: ${{ env.AWS_RDS_URI }}
          PRODUCTION_SECRET_KEY: ${{ env.PRODUCTION_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.ref == 'refs/heads/main'