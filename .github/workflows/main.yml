name: Continuous Integration and Delivery 

on: 
  push:
    branches:
      - main
      - dev

env:
  USERS: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/test-driven-users
  CLIENT: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/test-driven-client
  REACT_APP_API_SERVICE_URL: "http://flask-react-aws-alb-1764984278.us-east-1.elb.amazonaws.com"

jobs:
  
  build_and_test:
    name: Build & Test Dev Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Images
        run: |
          if expr ${GITHUB_REF} == "refs/heads/main" >/dev/null; then
            DOCKER_TAG=prod
          else
            DOCKER_TAG=${GITHUB_SHA}
          fi
          echo "Docker tag:" $DOCKER_TAG
          docker pull ${{ env.USERS }}:$DOCKER_TAG || true
          docker pull ${{ env.CLIENT }}:builder || true
          docker pull ${{ env.CLIENT }}:$DOCKER_TAG || true
      - name: Build Images
        run: |
          echo "Building and testing dev images.."
          docker-compose up --detach --build
          docker-compose exec -T api python -m pytest "src/tests" -p no:warnings --cov="src"
          docker-compose exec -T api flake8 src
          docker-compose exec -T api black src --check
          docker-compose exec -T api isort src --check-only
          docker-compose exec -T client npm run lint
          docker-compose exec -T client npm run prettier:check
          docker-compose exec -T client npm run prettier:write


  build_prod:
    name: Build & Push Prod Images
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set DOCKER_TAG environment variable
        run: |
          if expr ${GITHUB_REF} == "refs/heads/main" >/dev/null; then
            DT=prod
          else
            DT=${GITHUB_SHA}
          fi
          echo "DOCKER_TAG=$DT" >> $GITHUB_ENV
      - name: Pull Images
        run: |
          echo "Docker tag:" ${{ env.DOCKER_TAG }}
          docker pull ${{ env.USERS }}:${{ env.DOCKER_TAG }} || true
          docker pull ${{ env.CLIENT }}:builder || true
          docker pull ${{ env.CLIENT }}:${{ env.DOCKER_TAG }} || true
      - name: Build prod images
        run: |
          echo "Building prod images..."
          docker build \
            --cache-from ${{ env.USERS }}:${{ env.DOCKER_TAG }} \
            --file services/users/Dockerfile.prod \
            --tag ${{ env.USERS }}:${{ env.DOCKER_TAG }} \
            "./services/users"
          docker build \
            --target builder \
            --cache-from ${{ env.CLIENT }}:builder \
            --file services/client/Dockerfile.prod \
            --tag ${{ env.CLIENT }}:builder \
            --build-arg NODE_ENV=production \
            --build-arg REACT_APP_API_SERVICE_URL=${{ env.REACT_APP_API_SERVICE_URL }} \
            "./services/client"
          docker build \
            --cache-from ${{ env.CLIENT }}:${{ env.DOCKER_TAG }} \
            --file services/client/Dockerfile.prod \
            --tag ${{ env.CLIENT }}:${{ env.DOCKER_TAG }} \
            "./services/client"
      - name: Push Prod Images
        run: |
          echo "Pushing prod images to GitHub Packages..."
          docker push ${{ env.USERS }}:${{ env.DOCKER_TAG }}
          docker push ${{ env.CLIENT }}:builder
          docker push ${{ env.CLIENT }}:${{ env.DOCKER_TAG }}


  deploy:
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: [build_and_test, build_prod]
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check terraform
      - name: Terraform Init 
        id: init
        run: terraform init terraform
      - name: Terraform Plan 
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color terraform
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve terraform